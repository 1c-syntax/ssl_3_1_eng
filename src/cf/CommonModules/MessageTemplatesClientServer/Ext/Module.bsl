///////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

// Describes a template parameter for using them in external processing.
//
// Parameters:
//  ParametersTable           - ValueTable -  table with parameters.
//  ParameterName                - String -  name of the parameter to use.
//  TypeDetails                - TypeDescription -  parameter type.
//  IsPredefinedParameter - Boolean -  if False, it is an arbitrary parameter, otherwise it is the main parameter.
//  ParameterPresentation      - String -  output representation of the parameter.
//
Procedure AddTemplateParameter(ParametersTable, ParameterName, TypeDetails, IsPredefinedParameter, ParameterPresentation = "") Export

	NewRow                             = ParametersTable.Add();
	NewRow.ParameterName                = ParameterName;
	NewRow.TypeDetails                = TypeDetails;
	NewRow.IsPredefinedParameter = IsPredefinedParameter;
	NewRow.ParameterPresentation      = ?(IsBlankString(ParameterPresentation),ParameterName, ParameterPresentation);
	
EndProcedure

// Initializes the template message structure to be returned by external processing.
//
// Returns:
//   Structure - 
//
Function InitializeMessageStructure() Export
	
	MessageStructure = New Structure;
	MessageStructure.Insert("ArbitraryMessageText", "");
	MessageStructure.Insert("SMSMessageText", "");
	MessageStructure.Insert("EmailSubject", "");
	MessageStructure.Insert("EmailText", "");
	MessageStructure.Insert("AttachmentsStructure", New Structure);
	MessageStructure.Insert("HTMLEmailText", "<HTML></HTML>");
	
	Return MessageStructure;
	
EndFunction

// Initializes the Recipients structure to populate possible message recipients.
//
// Returns:
//   Structure - 
//
Function InitializeRecipientsStructure() Export
	
	Return New Structure("Recipient", New Array);
	
EndFunction

// The designer of the template parameters.
//
// Returns:
//  Structure - :
//   * Subject - String -  template theme (for emails).
//   * Text - String -  the text of the template;
//   * SignatureAndSeal - Boolean -  signature and seal feature in printed forms;
//   * MessageParameters - Structure -  additional message parameters;
//   * Description - String -  name of the message template;
//   * Ref - Undefined -  link to a reference list item;
//   * TemplateOwner - Undefined -    owner of the context template;
//   * DCSParameters - Map -  a set of parameters for getting data using the SKD;
//   * Parameters - Map -  template parameter;
//   * Template - String -  name of the SKD layout;
//   * SelectedAttachments - Map -  selected printed forms and attachments in the template;
//   * AttachmentsFormats - ValueList -  the format in which to save the printed form;
//   * ExpandRefAttributes - Boolean -  if True, then the reference details are available for their details.
//   * TemplateByExternalDataProcessor - Boolean -  if True, the template is generated by external processing;
//   * ExternalDataProcessor - Undefined -  a link to the external processing;
//   * Sender - String -  sender's email address;
//   * Transliterate - Boolean -  if True, the generated print forms and files will have names 
//                                   containing only Latin letters and numbers, so that they can be transferred between
//                                   different operating systems. For example, the file "Invoice. pdf" 
//                                   will be saved with the name " Schet na oplaty. pdf";
//   * PackToArchive - Boolean -  indicates that attachments and printed forms should be archived
//                                when they are sent;
//   * EmailFormat1 - EnumRef.EmailEditingMethods -  message text type: HTML or plain Text;
//   * FullAssignmentTypeName - String -  full name of the metadata object that is used to create messages;
//   * Purpose - String -  assigning a message template;
//   * TemplateType - String -  options: "Email" or "SMS".
//
Function TemplateParametersDetails() Export
	Result = New Structure;
	
	Result.Insert("Text",                           "");
	Result.Insert("Subject",                            "");
	Result.Insert("TemplateType",                      "MailMessage");
	Result.Insert("Purpose",                      "");
	Result.Insert("FullAssignmentTypeName",         "");
	Result.Insert("PackToArchive",                 False);
	Result.Insert("TransliterateFileNames",    False);
	Result.Insert("Transliterate",              False);
	Result.Insert("Sender",                     "");
	Result.Insert("ExternalDataProcessor",                Undefined);
	Result.Insert("TemplateByExternalDataProcessor",        False);
	Result.Insert("ExpandRefAttributes", True);
	Result.Insert("AttachmentsFormats",                 New ValueList);
	Result.Insert("SelectedAttachments",               New Map);
	Result.Insert("Template",                           "");
	Result.Insert("Parameters",                       New Map);
	Result.Insert("DCSParameters",                    New Map);
	Result.Insert("TemplateOwner",                 Undefined);
	Result.Insert("Ref",                          Undefined);
	Result.Insert("Attachments",                        New Map);
	Result.Insert("PrintCommands",                   New Array);
	Result.Insert("Description",                    "");
	Result.Insert("MessageParameters",              New Structure);
	Result.Insert("AddAttachedFiles",    False);
	Result.Insert("SignatureAndSeal",                  False);
	Result.Insert("ExtendedRecipientsList",    False);
	Result.Insert("AddAttachedFiles",    False);
	Result.Insert("EmailFormat1",                    PredefinedValue("Enum.EmailEditingMethods.HTML"));
	
	Return Result;
	
EndFunction

#EndRegion

#Region Private

Function EmailTemplateName() Export
	Return "Email";
EndFunction

Function SMSTemplateName() Export
	Return "SMS";
EndFunction

Function CommonID() Export
	Return "Shared";
EndFunction

Function SharedPresentation() Export
	Return NStr("en = 'Common';");
EndFunction

// Parameters:
//  Template - CatalogRef.MessageTemplates
//  SubjectOf - AnyRef
//  UUID - UUID
//
// Returns:
//  Structure:
//    * AdditionalParameters - Structure:
//       ** ConvertHTMLForFormattedDocument - Boolean
//       ** MessageKind - String
//       ** SendImmediately - Boolean
//       ** Account - CatalogRef.EmailAccounts
//       ** PrintForms - Array
//       ** SettingsForSaving - Arbitrary
//       ** ArbitraryParameters - Map
//       ** DCSParametersValues - Structure
//
Function SendOptionsConstructor(Template, SubjectOf, UUID) Export
	
	SendOptions = New Structure();
	SendOptions.Insert("Template", Template);
	SendOptions.Insert("SubjectOf", SubjectOf);
	SendOptions.Insert("UUID", UUID);
	SendOptions.Insert("AdditionalParameters", New Structure);
	SendOptions.AdditionalParameters.Insert("ConvertHTMLForFormattedDocument", False);
	SendOptions.AdditionalParameters.Insert("MessageKind", "");
	SendOptions.AdditionalParameters.Insert("ArbitraryParameters", New Map);
	SendOptions.AdditionalParameters.Insert("SendImmediately", False);
	SendOptions.AdditionalParameters.Insert("MessageParameters", New Structure);
	SendOptions.AdditionalParameters.Insert("Account", Undefined);
	SendOptions.AdditionalParameters.Insert("PrintForms", New Array);
	SendOptions.AdditionalParameters.Insert("SettingsForSaving");
	SendOptions.AdditionalParameters.Insert("DCSParametersValues", New Structure);
	
	Return SendOptions;
	
EndFunction

Function ArbitraryParametersTitle() Export
	Return NStr("en = 'Custom';");
EndFunction

// Handler for subscribing to the event processingform Receipt to redefine the file form.
//
// Parameters:
//  Source                 - CatalogManager -  directory Manager with the name "*Attached files".
//  FormType                 - String -  name of the standard form.
//  Parameters                - Structure -  shape parameter.
//  SelectedForm           - String -  name or metadata object of the form to open.
//  AdditionalInformation - Structure -  additional information for opening the form.
//  StandardProcessing     - Boolean -  indicates whether standard (system) event processing is performed.
//
Procedure DetermineAttachedFileForm(Source, FormType, Parameters,
				SelectedForm, AdditionalInformation, StandardProcessing) Export
				
	#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

	If Common.SubsystemExists("StandardSubsystems.FilesOperations") Then
		
		ModuleFilesOperationsInternalServerCall = Common.CommonModule("FilesOperationsInternalServerCall");
		ModuleFilesOperationsInternalServerCall.DetermineAttachedFileForm(Source, FormType, Parameters,
				SelectedForm, AdditionalInformation, StandardProcessing);
		
	EndIf;
		
	#Else
		
	If CommonClient.SubsystemExists("StandardSubsystems.FilesOperations") Then
		
		If TypeOf(SelectedForm) = Type("String") Then
			ModuleFilesOperationsInternalServerCall = CommonClient.CommonModule("FilesOperationsInternalServerCall");
			ModuleFilesOperationsInternalServerCall.DetermineAttachedFileForm(Source, FormType, Parameters,
					SelectedForm, AdditionalInformation, StandardProcessing);
		EndIf;
		
	EndIf;
			
	#EndIf
	
EndProcedure

#EndRegion
